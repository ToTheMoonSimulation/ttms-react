# # 3000번 포트에서 frontend가 돌아가고 있다는 것을 명시
# upstream frontend {
#     server frontend:3000;
# }

# # 5000번 포트에서 backend가 돌아가고 있다는 것을 명시
# upstream backend {
#     server backend:5000;
# }

# server {
#   	# Nginx 서버 포트 80번으로 열어준다.
#     listen 80;

#   	# location에는 우선 순위가 있는데 '/'은 우선 순위가 가장 낮다.
#     # 여기서는 /api로 시작하는 것을 먼저 찾고
#     # 그게 없다면 '/'로 시작되는 것이므로
#     # 그 요청을 http://fronted로 보내면 된다. 
#     location / {
#         proxy_pass http://frontend;
#     }

#   	# /api로 들어오는 요청을 http://backend로 보내준다. 
#     location /api {
#         proxy_pass http://backend;
#     }

#     # 에러 처리 부분(개발 환경에서만 발생)
#     location /sockjs-node {
#         proxy_pass http://frontend;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "Upgrade";
#     }

# }
# upstream frontend {
#     server localhost:80;
# }
# upstream backend {
#     server localhost:5000;
# }

# server {
#     listen 80;
#     location / {
#         proxy_pass http://frontend;
#     }
#     location /api {
#         proxy_pass http://backend;
#     }
#     # location / {
#     #     root   /usr/share/nginx/html;
#     #     index  index.html index.htm;
#     #     try_files $uri $uri/ /index.html;
#     # }
# }
upstream backend {
     server 172.10.0.2:5000;
}
server {
listen 80;
    location / {
        root   /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
    location /api {
        proxy_pass http://backend;
        #proxy_http_version 1.1;
        #proxy_set_header Connection "";
        
        #proxy_set_header Upgrade $http_upgrade;
        #proxy_set_header Host $host;
        #proxy_cache_bypass $http_upgrade;
    }
}